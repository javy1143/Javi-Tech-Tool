Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# === Logging ===
$logPath = "$env:ProgramData\DellWin11Optimizer.log"
function Log { param($msg) Write-Host $msg; Add-Content -Path $logPath -Value "$(Get-Date -Format u): $msg" }

# === Mappings ===
$global:appxMap = @{}
$excludeList = @("Teams", "OneDrive", "Outlook", "Edge", "Chrome", "RingCentral", "Kaseya", "Sentinel", "Acrobat", "Microsoft 365", "Office", "Visual C++", "Driver", "Intel")

# === Form Setup ===
$form = New-Object System.Windows.Forms.Form
$form.Text = "Dell Windows 11 Optimizer"
$form.Size = New-Object System.Drawing.Size(600, 600)
$form.StartPosition = "CenterScreen"

$tabs = New-Object System.Windows.Forms.TabControl
$tabs.Size = New-Object System.Drawing.Size(580, 540)
$tabs.Location = New-Object System.Drawing.Point(10,10)
$defaultFont = New-Object System.Drawing.Font("Segoe UI", 9)
$monoFont = New-Object System.Drawing.Font("Consolas", 10)

# === Tab 1: Optimizations ===
$tabOptimize = New-Object System.Windows.Forms.TabPage -Property @{ Text = "Optimizations" }

$lblPerf = New-Object System.Windows.Forms.Label -Property @{Text = "Performance Tweaks"; Location = "30,10"; Font = New-Object System.Drawing.Font("Segoe UI",10,[System.Drawing.FontStyle]::Bold); AutoSize = $true}
$chkServices = New-Object System.Windows.Forms.CheckBox -Property @{Text="Disable Unnecessary Services"; Location="30,35"; AutoSize=$true}
$chkTweaks = New-Object System.Windows.Forms.CheckBox -Property @{Text="Apply Performance Tweaks (Animations, Tips, Transparency)"; Location="30,60"; AutoSize=$true}

$lblStartup = New-Object System.Windows.Forms.Label -Property @{Text = "Startup & Background"; Location = "30,90"; Font = New-Object System.Drawing.Font("Segoe UI",10,[System.Drawing.FontStyle]::Bold); AutoSize = $true}
$lblStartupList = New-Object System.Windows.Forms.Label -Property @{Text = "Disable/Enable Individual Startup Items:"; Location="30,115"; AutoSize = $true}
$listBoxStartup = New-Object System.Windows.Forms.CheckedListBox -Property @{Location="30,135"; Size="500,150"; CheckOnClick = $true}

$lblPower = New-Object System.Windows.Forms.Label -Property @{Text = "Power & Storage"; Location = "30,290"; Font = New-Object System.Drawing.Font("Segoe UI",10,[System.Drawing.FontStyle]::Bold); AutoSize = $true}
$chkStorage = New-Object System.Windows.Forms.CheckBox -Property @{Text="Enable Storage Sense"; Location="30,315"; AutoSize=$true}
$chkPower = New-Object System.Windows.Forms.CheckBox -Property @{Text="Enable Ultimate Performance Plan"; Location="30,340"; AutoSize=$true}
$chkTrim = New-Object System.Windows.Forms.CheckBox -Property @{Text="Trim SSD (C:)"; Location="30,365"; AutoSize=$true}

$btnApply = New-Object System.Windows.Forms.Button -Property @{Text="Apply Selected Tweaks"; Size="200,40"; Location="180,410"}

$tabOptimize.Controls.AddRange(@(
    $lblPerf, $chkServices, $chkTweaks,
    $lblStartup, $lblStartupList, $listBoxStartup,
    $lblPower, $chkStorage, $chkPower, $chkTrim,
    $btnApply
))

$excluded = @("Teams", "OneDrive", "RingCentral", "Kaseya", "Sentinel", "Acrobat")
$global:startupMap = @{}
$startupItems = Get-CimInstance Win32_StartupCommand | Where-Object { $_.Name -and $excluded -notcontains $_.Name }
foreach ($item in $startupItems) {
    $label = $item.Name
    if ($label -match 'Updater|Install|Help|Service|Tray|Monitor|Assistant|Auto') {
        $label += " (Unnecessary)"
    } else {
        $label += " (Necessary)"
    }
    $index = $listBoxStartup.Items.Add($label)
    $listBoxStartup.SetItemChecked($index, $true)

    if (-not $global:drawItemApplied) {
        $listBoxStartup.DrawMode = 'OwnerDrawFixed'
        $listBoxStartup.Add_DrawItem({
            param($sender, $e)
            $e.DrawBackground()
            $text = $listBoxStartup.Items[$e.Index]
            $brush = if ($text -like "*(Unnecessary)*") { [System.Drawing.Brushes]::Red } else { [System.Drawing.Brushes]::Green }
            $e.Graphics.DrawString($text, $e.Font, $brush, $e.Bounds.X, $e.Bounds.Y)
            $e.DrawFocusRectangle()
        })
        $global:drawItemApplied = $true
    }

    $global:startupMap[$label] = $item.Command
}

$btnApply.Add_Click({
    if ($chkServices.Checked) {
        $services = @("DiagTrack", "MapsBroker", "WMPNetworkSvc", "XblAuthManager", "XboxNetApiSvc")
        foreach ($svc in $services) {
            try {
                Stop-Service -Name $svc -Force -ErrorAction SilentlyContinue
                Set-Service -Name $svc -StartupType Manual
                Log "Disabled service: $svc"
            } catch {
                Log "Failed to disable: $svc"
            }
        }
    }

    if ($chkTweaks.Checked) {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338388Enabled" -Value 0
        Log "Applied performance tweaks"
    }

    foreach ($i in 0..($listBoxStartup.Items.Count - 1)) {
        $label = $listBoxStartup.Items[$i]
        $enabled = $listBoxStartup.GetItemChecked($i)
        if (-not $enabled) {
            try {
                Log "Disabling startup: $label"
                # Actual disable logic would go here
            } catch {
                Log "Failed to disable: $label"
            }
        }
    }

    if ($chkStorage.Checked) {
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\StorageSense\Parameters\StoragePolicy" /v 01 /t REG_DWORD /d 1 /f
        Log "Enabled Storage Sense"
    }

    if ($chkPower.Checked) {
        powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 | Out-Null
        powercfg -setactive e9a42b02-d5df-448d-aa00-03f14749eb61
        Log "Enabled Ultimate Performance plan"
    }

    if ($chkTrim.Checked) {
        Optimize-Volume -DriveLetter C -ReTrim -Verbose | Out-Null
        Log "Trimmed SSD"
    }

    [System.Windows.Forms.MessageBox]::Show("Optimizations applied. Check console or log.", "Done")
})

# === Tab 2: Uninstaller ===
$tabUninstall = New-Object System.Windows.Forms.TabPage -Property @{ Text = "Uninstaller" }

$lblAppx = New-Object System.Windows.Forms.Label -Property @{Text="Recommended Apps to Uninstall:"; Location="20,10"; AutoSize=$true}
$listBoxAppx = New-Object System.Windows.Forms.CheckedListBox -Property @{Location="20,30"; Size="250,300"; CheckOnClick=$true}
$btnCheckBloat = New-Object System.Windows.Forms.Button -Property @{Text="Check All Bloatware"; Size="200,30"; Location="20,340"}
$btnUninstall = New-Object System.Windows.Forms.Button -Property @{Text="Uninstall Selected"; Size="200,40"; Location="20,380"}

$tabUninstall.Controls.AddRange(@($lblAppx, $listBoxAppx, $btnCheckBloat, $btnUninstall))

$safeAppxList = @(
    @{ Name = "Microsoft.XboxGamingOverlay"; Label = "Xbox Game Bar" },
    @{ Name = "Microsoft.XboxApp"; Label = "Xbox Console Companion" },
    @{ Name = "Microsoft.ZuneMusic"; Label = "Groove Music" },
    @{ Name = "Microsoft.ZuneVideo"; Label = "Movies & TV" },
    @{ Name = "Microsoft.YourPhone"; Label = "Your Phone" },
    @{ Name = "Microsoft.MicrosoftSolitaireCollection"; Label = "Solitaire Collection" },
    @{ Name = "SpotifyAB.SpotifyMusic"; Label = "Spotify" },
    @{ Name = "Microsoft.People"; Label = "People App" },
    @{ Name = "Microsoft.SkypeApp"; Label = "Skype" },
    @{ Name = "Microsoft.GetHelp"; Label = "Get Help" },
    @{ Name = "Microsoft.Getstarted"; Label = "Tips App" }
)

foreach ($app in $safeAppxList) {
    $index = $listBoxAppx.Items.Add($app.Label)
    $global:appxMap[$app.Label] = $app.Name
}

$btnCheckBloat.Add_Click({
    for ($i = 0; $i -lt $listBoxAppx.Items.Count; $i++) {
        $listBoxAppx.SetItemChecked($i, $true)
    }
    Log "Auto-selected all bloatware for removal"
})

$btnUninstall.Add_Click({
    foreach ($item in $listBoxAppx.CheckedItems) {
        $pkg = $global:appxMap[$item]
        try {
            Write-Host "Uninstalling $item ($pkg)..."
            Get-AppxPackage -Name $pkg | Remove-AppxPackage -ErrorAction Stop
            Log "Uninstalled: $item ($pkg)"
        } catch {
            Log "Failed to uninstall: $item"
        }
    }
    [System.Windows.Forms.MessageBox]::Show("Selected apps uninstalled.", "Done")
})

# === Tab 3: Advanced Tools ===
$tabAdvanced = New-Object System.Windows.Forms.TabPage -Property @{ Text = "Advanced Tools" }

$btnDiskCleanup = New-Object System.Windows.Forms.Button -Property @{Text="Run Disk Cleanup"; Size="200,30"; Location="20,20"}
$btnFlushDNS = New-Object System.Windows.Forms.Button -Property @{Text="Flush DNS Cache"; Size="200,30"; Location="20,60"}
$btnDisableBackgroundApps = New-Object System.Windows.Forms.Button -Property @{Text="Disable Background Apps"; Size="200,30"; Location="20,100"}
$btnEnableBackgroundApps = New-Object System.Windows.Forms.Button -Property @{Text="Enable Background Apps"; Size="200,30"; Location="240,100"}
$btnOpenTaskManager = New-Object System.Windows.Forms.Button -Property @{Text="Open Task Manager"; Size="200,30"; Location="20,140"}
$btnOpenWindowsTools = New-Object System.Windows.Forms.Button -Property @{Text="Open Windows Tools"; Size="200,30"; Location="20,180"}

$btnDiskCleanup.Add_Click({ Write-Host "Launching Disk Cleanup..."; Log "Launching Disk Cleanup"; Start-Process -FilePath cleanmgr.exe })
$btnFlushDNS.Add_Click({ Write-Host "Flushing DNS Cache..."; ipconfig /flushdns | Write-Host; Log "DNS cache flushed" })
$btnDisableBackgroundApps.Add_Click({ Write-Host "Disabling background apps..."; Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" -Name "GlobalUserDisabled" -Value 1; Log "Background apps disabled" })
$btnEnableBackgroundApps.Add_Click({ Write-Host "Enabling background apps..."; Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" -Name "GlobalUserDisabled" -Value 0; Log "Background apps enabled" })
$btnOpenTaskManager.Add_Click({ Write-Host "Opening Task Manager..."; Log "Task Manager opened"; Start-Process taskmgr.exe })
$btnOpenWindowsTools.Add_Click({ Write-Host "Opening Windows Tools..."; Log "Windows Tools opened"; Start-Process control.exe appwiz.cpl })

$tabAdvanced.Controls.AddRange(@($btnDiskCleanup, $btnFlushDNS, $btnDisableBackgroundApps, $btnEnableBackgroundApps, $btnOpenTaskManager, $btnOpenWindowsTools))

# === Tab 4: System Info ===
$tabSystemInfo = New-Object System.Windows.Forms.TabPage -Property @{ Text = "System Info" }
$txtSysInfo = New-Object System.Windows.Forms.TextBox -Property @{
    Multiline = $true; ReadOnly = $true; ScrollBars = "Vertical";
    Location = "10,10"; Size = "540,460"; Font = $monoFont
}
$btnRefreshSys = New-Object System.Windows.Forms.Button -Property @{Text="Refresh Info"; Size="120,30"; Location="10,480"; Font = $defaultFont}

$btnRefreshSys.Add_Click({
    $info = @()
    $info += "==================== SYSTEM SUMMARY ===================="
    $info += "Computer Name     : $(hostname)"
    $info += "OS Version        : $((Get-CimInstance Win32_OperatingSystem).Caption)"
    $info += "OS Build          : $([Environment]::OSVersion.Version.ToString())"
    $info += "CPU               : $((Get-CimInstance Win32_Processor).Name)"
    $info += "RAM               : {0:N0} MB" -f ((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1MB)

    $cDrive = Get-CimInstance Win32_LogicalDisk | Where-Object { $_.DeviceID -eq "C:" }
    if ($cDrive) {
        $info += "Disk (C:) Total   : $([math]::Round($cDrive.Size / 1GB)) GB"
        $info += "Disk (C:) Free    : $([math]::Round($cDrive.FreeSpace / 1GB)) GB"
    } else {
        $info += "Disk Info         : Not Detected"
    }

    $info += "Last Boot         : $((Get-CimInstance Win32_OperatingSystem).LastBootUpTime)"

    $gpu = Get-CimInstance Win32_VideoController | Select-Object -First 1 -ExpandProperty Name
    if ($gpu) { $info += "GPU               : $gpu" } else { $info += "GPU               : Not Detected" }

    $battery = Get-CimInstance Win32_Battery
    if ($battery) {
        $batteryStatus = switch ($battery.BatteryStatus) {
            1 { "Discharging" }
            2 { "AC connected" }
            3 { "Fully Charged" }
            4 { "Low" }
            5 { "Critical" }
            6 { "Charging" }
            default { "Unknown" }
        }
        $info += "Battery Status    : $batteryStatus"
        $info += "Battery Remaining : $($battery.EstimatedChargeRemaining)%"
    } else {
        $info += "Battery Info      : Not Detected"
    }
    $info += "========================================================"

    $txtSysInfo.Lines = $info
    Log "System info refreshed"
})

$tabSystemInfo.Controls.AddRange(@($txtSysInfo, $btnRefreshSys))

# === Tab 5: License Info ===
$tabLicenseInfo = New-Object System.Windows.Forms.TabPage -Property @{ Text = "License Info" }
$txtLicenses = New-Object System.Windows.Forms.TextBox -Property @{
    Multiline = $true; ReadOnly = $true; ScrollBars = "Vertical";
    Location = "10,10"; Size = "540,460"; Font = $defaultFont
}
$btnRefreshLicenses = New-Object System.Windows.Forms.Button -Property @{Text="Refresh Licenses"; Size="120,30"; Location="10,480"; Font = $defaultFont}

$btnRefreshLicenses.Add_Click({
    $lines = @()
    $lines += "==================== LICENSED SOFTWARE ===================="

    $registryPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    )

    foreach ($path in $registryPaths) {
        $apps = Get-ItemProperty $path -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -and ($_.DisplayName -match "Adobe|Office|Microsoft 365|Acrobat") }
        foreach ($app in $apps) {
            $lines += "App: $($app.DisplayName)"
            if ($app.Publisher) { $lines += "Publisher: $($app.Publisher)" }
            if ($app.InstallDate) { $lines += "Installed On: $($app.InstallDate)" }
            if ($app.HelpLink) { $lines += "HelpLink: $($app.HelpLink)" }

            if ($app.DisplayName -like "*Adobe*" -or $app.DisplayName -like "*Acrobat*") {
                $adobeKeyPaths = @(
                    "HKLM:\SOFTWARE\Adobe\Adobe Acrobat\*",
                    "HKLM:\SOFTWARE\WOW6432Node\Adobe\Adobe Acrobat\*"
                )
                foreach ($adobePath in $adobeKeyPaths) {
                    try {
                        Get-ChildItem -Path $adobePath -ErrorAction SilentlyContinue | ForEach-Object {
                            $props = Get-ItemProperty -Path $_.PsPath -ErrorAction SilentlyContinue
                            foreach ($name in $props.PSObject.Properties.Name) {
                                if ($name -like '*Serial*' -or $name -like '*License*') {
                                    $value = $props.$name
                                    if ($value) { $lines += "License Info: $name = $value" }
                                }
                            }
                        }
                    } catch {}
                }
            }
            $lines += "---"
        }
    }

    $lines += "(Note: License keys are only visible if stored in plain registry values)"
    $lines += "==========================================================="

    $txtLicenses.Lines = $lines
    Log "License info refreshed"
})

$tabLicenseInfo.Controls.AddRange(@($txtLicenses, $btnRefreshLicenses))




# === Finalize ===
$tabs.TabPages.AddRange(@($tabOptimize, $tabUninstall, $tabAdvanced, $tabSystemInfo, $tabLicenseInfo))
$form.Controls.Add($tabs)
[void]$form.ShowDialog()
