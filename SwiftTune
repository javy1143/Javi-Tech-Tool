<#
.SYNOPSIS
    A PowerShell script with a Graphical User Interface (GUI) to apply various Windows optimization tweaks and launch external tools.

.DESCRIPTION
    This script provides a user-friendly window with checkboxes for different optimization categories,
    allowing a user to select and apply tweaks. It also includes a button to download and run
    O&O ShutUp10++ for advanced privacy settings.
    It requires administrative privileges and will prompt for them if not detected.

.NOTES
    Author: Gemini
    Version: 1.7
    Instructions: Run this script as an Administrator.
#>

#================================================================================================
# 1. ADMIN & ASSEMBLY SETUP
#================================================================================================

# --- Request Administrator Privileges ---
# This section checks if the script is running as an administrator. If not, it re-launches itself with admin rights.
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    # If not running as admin, show a console message and restart the script with admin rights.
    Write-Warning "Administrator privileges are required. Attempting to re-launch as administrator..."
    Start-Process powershell.exe -Verb RunAs -ArgumentList ('-NoProfile -ExecutionPolicy Bypass -File "{0}"' -f $MyInvocation.MyCommand.Path)
    return
}

# --- Load Windows Forms Assemblies ---
# These assemblies are required to build the GUI.
try {
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing
}
catch {
    Write-Error "Failed to load required .NET Assemblies for GUI. Please ensure you are running on a Windows system with .NET Framework."
    pause
    exit
}

#================================================================================================
# 2. HELPER FUNCTIONS (TWEAKS)
# These functions encapsulate the logic for each optimization category.
#================================================================================================

# --- Helper to log messages to the GUI's output box ---
function Write-Log {
    param(
        [string]$Message,
        [System.Windows.Forms.RichTextBox]$OutputBox,
        [System.Drawing.Color]$Color = [System.Drawing.Color]::White
    )
    if ($OutputBox) {
        $OutputBox.SelectionStart = $OutputBox.TextLength
        $OutputBox.SelectionLength = 0
        $OutputBox.SelectionColor = $Color
        $OutputBox.AppendText("$(Get-Date -f 'HH:mm:ss') - $Message`n")
        $OutputBox.ScrollToCaret()
        $OutputBox.Refresh()
    }
    # Also write to the console host for debugging.
    Write-Host "$(Get-Date -f 'HH:mm:ss') - $Message"
}

# --- Helper for setting registry values safely ---
function Set-RegValue {
    param(
        [string]$Path,
        [string]$Name,
        $Value,
        [string]$Type = "DWord",
        [System.Windows.Forms.RichTextBox]$OutputBox
    )
    try {
        if (-not (Test-Path $Path)) {
            Write-Log -Message "Creating registry path: $Path" -OutputBox $OutputBox -Color 'Yellow'
            New-Item -Path $Path -Force -ErrorAction Stop | Out-Null
        }
        Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type $Type -Force -ErrorAction Stop
        Write-Log -Message "Set [$Name] in [$Path]" -OutputBox $OutputBox -Color 'LimeGreen'
    }
    catch {
        Write-Log -Message "ERROR: Failed to set registry value $Name at $Path. Details: $($_.Exception.Message)" -OutputBox $OutputBox -Color 'Red'
    }
}

# --- Helper for setting service startup types ---
function Set-ServiceStatus {
    param(
        [string]$Name,
        [string]$StartupType,
        [System.Windows.Forms.RichTextBox]$OutputBox
    )
    try {
        $svc = Get-Service -Name $name -ErrorAction Stop
        if ($svc) {
            Write-Log -Message "Setting service '$($svc.Name)' to $startupType" -OutputBox $OutputBox -Color 'Cyan'
            Set-Service -Name $svc.Name -StartupType $startupType -ErrorAction Stop
        }
    }
    catch {
        Write-Log -Message "INFO: Service '$name' not found or couldn't be changed." -OutputBox $OutputBox -Color 'Gray'
    }
}

# --- Tweak Functions ---

function Invoke-DeleteTempFiles {
    param($OutputBox)
    Write-Log -Message "--- Deleting Temporary Files ---" -OutputBox $OutputBox -Color 'Gold'
    $paths = "C:\Windows\Temp", $env:TEMP
    foreach ($p in $paths) {
        Write-Log -Message "Cleaning folder: $p" -OutputBox $OutputBox -Color 'Cyan'
        Get-ChildItem -Path $p -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
    }
    Write-Log -Message "Temporary file cleanup complete." -OutputBox $OutputBox
}

function Invoke-DisableTelemetry {
    param($OutputBox)
    Write-Log -Message "--- Disabling Telemetry & Consumer Features ---" -OutputBox $OutputBox -Color 'Gold'
    # Disable Scheduled Tasks
    $tasks = "Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser", "Microsoft\Windows\Application Experience\ProgramDataUpdater", "Microsoft\Windows\Autochk\Proxy", "Microsoft\Windows\Customer Experience Improvement Program\Consolidator", "Microsoft\Windows\Customer Experience Improvement Program\UsbCeip", "Microsoft\Windows\DiskDiagnostic\Microsoft-Windows-DiskDiagnosticDataCollector", "Microsoft\Windows\Feedback\Siuf\DmClient", "Microsoft\Windows\Feedback\Siuf\DmClientOnScenarioDownload", "Microsoft\Windows\Windows Error Reporting\QueueReporting", "Microsoft\Windows\Application Experience\MareBackup", "Microsoft\Windows\Application Experience\StartupAppTask", "Microsoft\Windows\Application Experience\PcaPatchDbTask", "Microsoft\Windows\Maps\MapsUpdateTask"
    foreach ($task in $tasks) {
        Write-Log -Message "Disabling scheduled task: $task" -OutputBox $OutputBox -Color 'Cyan'
        Get-ScheduledTask -TaskPath "\$task" -ErrorAction SilentlyContinue | Disable-ScheduledTask -ErrorAction SilentlyContinue
    }

    # Registry Tweaks
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent" -Name "DisableWindowsConsumerFeatures" -Value 1 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection" -Name "AllowTelemetry" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection" -Name "AllowTelemetry" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "ContentDeliveryAllowed" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "OemPreInstalledAppsEnabled" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ShowTaskViewButton" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "SystemResponsiveness" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xFFFFFFFF -Type DWord -OutputBox $OutputBox
    Set-RegValue -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 1 -Type String -OutputBox $OutputBox
    Set-RegValue -Path "HKCU:\Control Panel\Desktop" -Name "AutoEndTasks" -Value 1 -Type String -OutputBox $OutputBox
    Write-Log -Message "Telemetry and Consumer Features disabled." -OutputBox $OutputBox
}

function Invoke-DisableActivityHistory {
    param($OutputBox)
    Write-Log -Message "--- Disabling Activity History ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "EnableActivityFeed" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "PublishUserActivities" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "UploadUserActivities" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "Activity History disabled." -OutputBox $OutputBox
}

function Invoke-DisableGameDVR {
    param($OutputBox)
    Write-Log -Message "--- Disabling Game DVR ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\GameDVR" -Name "AllowGameDVR" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "Game DVR disabled." -OutputBox $OutputBox
}

function Invoke-DisableHibernation {
    param($OutputBox)
    Write-Log -Message "--- Disabling Hibernation ---" -OutputBox $OutputBox -Color 'Gold'
    powercfg -h off
    Set-RegValue -Path "HKLM:\System\CurrentControlSet\Control\Session Manager\Power" -Name "HibernateEnabled" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "Hibernation disabled." -OutputBox $OutputBox
}

function Invoke-OptimizeServices {
    param($OutputBox)
    Write-Log -Message "--- Optimizing Services ---" -OutputBox $OutputBox -Color 'Gold'
    $services = @{"AJRouter" = "Disabled"; "ALG" = "Manual"; "AppVClient" = "Disabled"; "AppXSvc" = "Manual"; "AxInstSV" = "Manual"; "BcastDVRUserService_*" = "Manual"; "BITS" = "AutomaticDelayedStart"; "Browser" = "Manual"; "diagsvc" = "Manual"; "DiagTrack" = "Disabled"; "dmwappushservice" = "Manual"; "Fax" = "Manual"; "HomeGroupListener" = "Manual"; "HomeGroupProvider" = "Manual"; "RemoteRegistry" = "Disabled"; "ssh-agent" = "Disabled"; "TapiSrv" = "Manual"; "tzautoupdate" = "Disabled"; "UevAgentService" = "Disabled"; "wuauserv" = "Manual"}
    foreach ($name in $services.Keys) { Set-ServiceStatus -Name $name -StartupType $services[$name] -OutputBox $OutputBox }
    Write-Log -Message "Service optimization complete." -OutputBox $OutputBox
}

function Invoke-DebloatEdge {
    param($OutputBox)
    Write-Log -Message "--- Debloating Microsoft Edge ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "PersonalizationReportingEnabled" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "ShowRecommendationsEnabled" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "HideFirstRunExperience" -Value 1 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "EdgeShoppingAssistantEnabled" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "WebWidgetAllowed" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Name "CryptoWalletEnabled" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "Microsoft Edge debloating complete." -OutputBox $OutputBox
}

function Invoke-DisableTeredo {
    param($OutputBox)
    Write-Log -Message "--- Disabling Teredo ---" -OutputBox $OutputBox -Color 'Gold'
    netsh interface teredo set state disabled | Out-Null
    Set-RegValue -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Value 0x8e -OutputBox $OutputBox
    Write-Log -Message "Teredo disabled." -OutputBox $OutputBox
}

function Invoke-DisableBackgroundApps {
    param($OutputBox)
    Write-Log -Message "--- Disabling Background Apps ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" -Name "GlobalUserDisabled" -Value 1 -OutputBox $OutputBox
    Write-Log -Message "Background Apps disabled." -OutputBox $OutputBox
}

function Invoke-AdobeDebloat {
    param($OutputBox)
    Write-Log -Message "--- Debloating Adobe ---" -OutputBox $OutputBox -Color 'Gold'
    $adobeServices = @{"AGSService" = "Disabled"; "AGMService" = "Disabled"; "AdobeUpdateService" = "Manual"; "AdobeARMservice" = "Manual"; "CCXProcess" = "Manual"; "CoreSync" = "Manual"}
    foreach ($name in $adobeServices.Keys) { Set-ServiceStatus -Name $name -StartupType $adobeServices[$name] -OutputBox $OutputBox }

    Write-Log -Message "Attempting to rename Adobe Desktop Service..." -OutputBox $OutputBox -Color 'Cyan'
    $path = "C:\Program Files (x86)\Common Files\Adobe\Adobe Desktop Common\ADS\Adobe Desktop Service.exe"
    if (Test-Path $path) {
        try {
            Rename-Item -Path $path -NewName "Adobe Desktop Service.exe.old" -Force -ErrorAction Stop
            Write-Log -Message "Successfully renamed Adobe Desktop Service." -OutputBox $OutputBox -Color 'LimeGreen'
        } catch {
            Write-Log -Message "ERROR: Failed to rename Adobe Desktop Service. Permissions issue or file in use." -OutputBox $OutputBox -Color 'Red'
        }
    } else {
        Write-Log -Message "INFO: Adobe Desktop Service not found at default location." -OutputBox $OutputBox -Color 'Gray'
    }
    Write-Log -Message "Adobe Debloat complete." -OutputBox $OutputBox
}

function Invoke-DisableRecall {
    param($OutputBox)
    Write-Log -Message "--- Disabling Windows Recall Feature ---" -OutputBox $OutputBox -Color 'Gold'
    try {
        Set-RegValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsAI" -Name "DisableAIDataAnalysis" -Value 1 -OutputBox $OutputBox
        Write-Log -Message "Executing DISM to disable Recall feature. This may take a moment..." -OutputBox $OutputBox -Color 'Cyan'
        $process = Start-Process "DISM.exe" -ArgumentList "/Online /Disable-Feature /FeatureName:Recall" -Wait -PassThru -NoNewWindow
        if ($process.ExitCode -eq 0 -or $process.ExitCode -eq 3010) { # 3010 means success, restart required
            Write-Log -Message "Successfully disabled Windows Recall feature. A restart may be required." -OutputBox $OutputBox -Color 'LimeGreen'
        } else {
            Write-Log -Message "ERROR: DISM failed to disable Recall. Exit code: $($process.ExitCode)" -OutputBox $OutputBox -Color 'Red'
        }
    } catch {
        Write-Log -Message "ERROR: An exception occurred while disabling Recall. Details: $($_.Exception.Message)" -OutputBox $OutputBox -Color 'Red'
    }
}

function Invoke-DisableStorageSense {
    param($OutputBox)
    Write-Log -Message "--- Disabling Storage Sense ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\StorageSense\Parameters\StoragePolicy" -Name "01" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "Storage Sense disabled." -OutputBox $OutputBox
}

function Invoke-DisableWifiSense {
    param($OutputBox)
    Write-Log -Message "--- Disabling WiFi Sense ---" -OutputBox $OutputBox -Color 'Gold'
    Set-RegValue -Path "HKLM:\Software\Microsoft\PolicyManager\default\WiFi\AllowWiFiHotSpotReporting" -Name "Value" -Value 0 -OutputBox $OutputBox
    Set-RegValue -Path "HKLM:\Software\Microsoft\PolicyManager\default\WiFi\AllowAutoConnectToWiFiSenseHotspots" -Name "Value" -Value 0 -OutputBox $OutputBox
    Write-Log -Message "WiFi Sense disabled." -OutputBox $OutputBox
}

function Invoke-OOSU10 {
    param($OutputBox)
    $url = "https://dl5.oo-software.com/files/ooshutup10/OOSU10.exe"
    $dest = Join-Path $env:TEMP "OOSU10.exe"
    
    Write-Log -Message "--- Launching O&O ShutUp10++ ---" -OutputBox $OutputBox -Color 'Gold'
    Write-Log -Message "Downloading from $url..." -OutputBox $OutputBox -Color 'Cyan'
    
    try {
        Invoke-WebRequest -Uri $url -OutFile $dest -UseBasicParsing -ErrorAction Stop
        Write-Log -Message "Download complete. Launching application..." -OutputBox $OutputBox -Color 'LimeGreen'
        Start-Process -FilePath $dest
    } catch {
        Write-Log -Message "ERROR: Failed to download O&O ShutUp10++. Please check your internet connection." -OutputBox $OutputBox -Color 'Red'
        Write-Log -Message "Details: $($_.Exception.Message)" -OutputBox $OutputBox -Color 'Red'
    }
}


#================================================================================================
# 3. GUI CREATION
# This section defines all the visual elements of the application window.
#================================================================================================

$main_form = New-Object System.Windows.Forms.Form
$main_form.Text = "Windows Optimization Tool v1.7"
$main_form.Size = New-Object System.Drawing.Size(600, 740) # Adjusted for single column
$main_form.StartPosition = "CenterScreen"
$main_form.FormBorderStyle = 'FixedSingle'
$main_form.MaximizeBox = $false
$main_form.BackColor = [System.Drawing.Color]::FromArgb(45, 45, 48)
$main_form.ForeColor = [System.Drawing.Color]::White

# --- Create Font objects ---
$font = New-Object System.Drawing.Font("Segoe UI", 10)
$titleFont = New-Object System.Drawing.Font("Segoe UI", 12, [System.Drawing.FontStyle]::Bold)

# --- GroupBox to contain the checkboxes ---
$group_box = New-Object System.Windows.Forms.GroupBox
$group_box.Location = New-Object System.Drawing.Point(20, 20)
$group_box.Size = New-Object System.Drawing.Size(545, 500) # Adjusted for single column
$group_box.Text = "Select Tweaks to Apply"
$group_box.Font = $titleFont
$group_box.ForeColor = [System.Drawing.Color]::White
$main_form.Controls.Add($group_box)

# --- Create Checkboxes and add them to the panel ---
$checkboxes = @{}
$tweak_categories = @(
    "Delete Temporary Files",
    "Disable Hibernation",
    "Optimize Services",
    "Disable Telemetry & Consumer Features",
    "Disable Activity History",
    "Disable Game DVR",
    "Disable Background Apps",
    "Disable Storage Sense",
    "Disable WiFi Sense",
    "Disable Teredo",
    "Disable Recall (Windows 11)",
    "Debloat Microsoft Edge",
    "Adobe Debloat"
)

# Logic to fill a single column vertically
$y_pos = 30
foreach ($category in $tweak_categories) {
    $checkbox = New-Object System.Windows.Forms.CheckBox
    $checkbox.Location = New-Object System.Drawing.Point(20, $y_pos)
    $checkbox.Size = New-Object System.Drawing.Size(500, 30)
    $checkbox.Text = $category
    $checkbox.Font = $font
    $checkbox.ForeColor = [System.Drawing.Color]::White
    $group_box.Controls.Add($checkbox)
    $checkboxes[$category] = $checkbox
    $y_pos += 35
}

# --- Create Buttons ---
$btn_apply = New-Object System.Windows.Forms.Button
$btn_apply.Location = New-Object System.Drawing.Point(405, 535) # Adjusted position
$btn_apply.Size = New-Object System.Drawing.Size(160, 40) # Adjusted size
$btn_apply.Text = "Apply Selected Tweaks"
$btn_apply.Font = $font
$btn_apply.BackColor = [System.Drawing.Color]::FromArgb(0, 122, 204)
$btn_apply.FlatStyle = 'Flat'
$btn_apply.FlatAppearance.BorderSize = 0
$main_form.Controls.Add($btn_apply)

$btn_select_all = New-Object System.Windows.Forms.Button
$btn_select_all.Location = New-Object System.Drawing.Point(20, 535)
$btn_select_all.Size = New-Object System.Drawing.Size(90, 40) # Adjusted size
$btn_select_all.Text = "Select All"
$btn_select_all.Font = $font
$btn_select_all.BackColor = [System.Drawing.Color]::FromArgb(63, 63, 70)
$btn_select_all.FlatStyle = 'Flat'
$btn_select_all.FlatAppearance.BorderSize = 0
$main_form.Controls.Add($btn_select_all)

$btn_deselect_all = New-Object System.Windows.Forms.Button
$btn_deselect_all.Location = New-Object System.Drawing.Point(120, 535) # Adjusted position
$btn_deselect_all.Size = New-Object System.Drawing.Size(90, 40) # Adjusted size
$btn_deselect_all.Text = "Deselect All"
$btn_deselect_all.Font = $font
$btn_deselect_all.BackColor = [System.Drawing.Color]::FromArgb(63, 63, 70)
$btn_deselect_all.FlatStyle = 'Flat'
$btn_deselect_all.FlatAppearance.BorderSize = 0
$main_form.Controls.Add($btn_deselect_all)

# --- NEW BUTTON for O&O ShutUp10++ ---
$btn_oosu10 = New-Object System.Windows.Forms.Button
$btn_oosu10.Location = New-Object System.Drawing.Point(220, 535) # Positioned between other buttons
$btn_oosu10.Size = New-Object System.Drawing.Size(175, 40)
$btn_oosu10.Text = "Launch O&O ShutUp10++"
$btn_oosu10.Font = $font
$btn_oosu10.BackColor = [System.Drawing.Color]::FromArgb(107, 33, 107) # Distinct color
$btn_oosu10.FlatStyle = 'Flat'
$btn_oosu10.FlatAppearance.BorderSize = 0
$main_form.Controls.Add($btn_oosu10)

# --- Output Log Textbox ---
$output_box = New-Object System.Windows.Forms.RichTextBox
$output_box.Location = New-Object System.Drawing.Point(20, 590)
$output_box.Size = New-Object System.Drawing.Size(545, 100)
$output_box.Font = New-Object System.Drawing.Font("Consolas", 9)
$output_box.ReadOnly = $true
$output_box.BackColor = [System.Drawing.Color]::FromArgb(30, 30, 30)
$output_box.ForeColor = [System.Drawing.Color]::White
$output_box.BorderStyle = 'FixedSingle'
$main_form.Controls.Add($output_box)
Write-Log -Message "Ready. Select tweaks and click 'Apply'." -OutputBox $output_box

#================================================================================================
# 4. EVENT HANDLERS
# This section defines what happens when you click the buttons.
#================================================================================================

$btn_select_all.Add_Click({
    $checkboxes.Values | ForEach-Object { $_.Checked = $true }
})

$btn_deselect_all.Add_Click({
    $checkboxes.Values | ForEach-Object { $_.Checked = $false }
})

$btn_oosu10.Add_Click({
    Invoke-OOSU10 -OutputBox $output_box
})

$btn_apply.Add_Click({
    # Disable button to prevent multiple clicks during execution
    $btn_apply.Enabled = $false
    $btn_apply.Text = "Working..."
    $output_box.Clear()

    Write-Log -Message "Starting optimizations..." -OutputBox $output_box

    # Execute checked functions in order
    if ($checkboxes["Delete Temporary Files"].Checked) { Invoke-DeleteTempFiles -OutputBox $output_box }
    if ($checkboxes["Disable Hibernation"].Checked) { Invoke-DisableHibernation -OutputBox $output_box }
    if ($checkboxes["Optimize Services"].Checked) { Invoke-OptimizeServices -OutputBox $output_box }
    if ($checkboxes["Disable Telemetry & Consumer Features"].Checked) { Invoke-DisableTelemetry -OutputBox $output_box }
    if ($checkboxes["Disable Activity History"].Checked) { Invoke-DisableActivityHistory -OutputBox $output_box }
    if ($checkboxes["Disable Game DVR"].Checked) { Invoke-DisableGameDVR -OutputBox $outputBox }
    if ($checkboxes["Disable Background Apps"].Checked) { Invoke-DisableBackgroundApps -OutputBox $output_box }
    if ($checkboxes["Disable Storage Sense"].Checked) { Invoke-DisableStorageSense -OutputBox $output_box }
    if ($checkboxes["Disable WiFi Sense"].Checked) { Invoke-DisableWifiSense -OutputBox $output_box }
    if ($checkboxes["Disable Teredo"].Checked) { Invoke-DisableTeredo -OutputBox $output_box }
    if ($checkboxes["Disable Recall (Windows 11)"].Checked) { Invoke-DisableRecall -OutputBox $output_box }
    if ($checkboxes["Debloat Microsoft Edge"].Checked) { Invoke-DebloatEdge -OutputBox $output_box }
    if ($checkboxes["Adobe Debloat"].Checked) { Invoke-AdobeDebloat -OutputBox $output_box }
    
    Write-Log -Message "--- ALL TASKS COMPLETE ---" -OutputBox $output_box -Color 'Gold'

    # Re-enable button
    $btn_apply.Enabled = $true
    $btn_apply.Text = "Apply Selected Tweaks"
})

#================================================================================================
# 5. SHOW THE FORM
#================================================================================================
$main_form.Add_Shown({$main_form.Activate()})
[void]$main_form.ShowDialog()
